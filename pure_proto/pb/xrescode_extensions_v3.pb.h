// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: xrescode_extensions_v3.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_xrescode_5fextensions_5fv3_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_xrescode_5fextensions_5fv3_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3015000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3015001 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
#include <google/protobuf/descriptor.pb.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_xrescode_5fextensions_5fv3_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_xrescode_5fextensions_5fv3_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxiliaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[2]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_xrescode_5fextensions_5fv3_2eproto;
::PROTOBUF_NAMESPACE_ID::Metadata descriptor_table_xrescode_5fextensions_5fv3_2eproto_metadata_getter(int index);
namespace xrescode {
class xrescode_index;
struct xrescode_indexDefaultTypeInternal;
extern xrescode_indexDefaultTypeInternal _xrescode_index_default_instance_;
class xrescode_loader;
struct xrescode_loaderDefaultTypeInternal;
extern xrescode_loaderDefaultTypeInternal _xrescode_loader_default_instance_;
}  // namespace xrescode
PROTOBUF_NAMESPACE_OPEN
template<> ::xrescode::xrescode_index* Arena::CreateMaybeMessage<::xrescode::xrescode_index>(Arena*);
template<> ::xrescode::xrescode_loader* Arena::CreateMaybeMessage<::xrescode::xrescode_loader>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace xrescode {

enum xrescode_index_type : int {
  EN_INDEX_KV = 0,
  EN_INDEX_KL = 1,
  EN_INDEX_IV = 2,
  EN_INDEX_IL = 3,
  xrescode_index_type_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::min(),
  xrescode_index_type_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::max()
};
bool xrescode_index_type_IsValid(int value);
constexpr xrescode_index_type xrescode_index_type_MIN = EN_INDEX_KV;
constexpr xrescode_index_type xrescode_index_type_MAX = EN_INDEX_IL;
constexpr int xrescode_index_type_ARRAYSIZE = xrescode_index_type_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* xrescode_index_type_descriptor();
template<typename T>
inline const std::string& xrescode_index_type_Name(T enum_t_value) {
  static_assert(::std::is_same<T, xrescode_index_type>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function xrescode_index_type_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    xrescode_index_type_descriptor(), enum_t_value);
}
inline bool xrescode_index_type_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, xrescode_index_type* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<xrescode_index_type>(
    xrescode_index_type_descriptor(), name, value);
}
// ===================================================================

class xrescode_index PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:xrescode.xrescode_index) */ {
 public:
  inline xrescode_index() : xrescode_index(nullptr) {}
  virtual ~xrescode_index();
  explicit constexpr xrescode_index(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  xrescode_index(const xrescode_index& from);
  xrescode_index(xrescode_index&& from) noexcept
    : xrescode_index() {
    *this = ::std::move(from);
  }

  inline xrescode_index& operator=(const xrescode_index& from) {
    CopyFrom(from);
    return *this;
  }
  inline xrescode_index& operator=(xrescode_index&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const xrescode_index& default_instance() {
    return *internal_default_instance();
  }
  static inline const xrescode_index* internal_default_instance() {
    return reinterpret_cast<const xrescode_index*>(
               &_xrescode_index_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(xrescode_index& a, xrescode_index& b) {
    a.Swap(&b);
  }
  inline void Swap(xrescode_index* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(xrescode_index* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline xrescode_index* New() const final {
    return CreateMaybeMessage<xrescode_index>(nullptr);
  }

  xrescode_index* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<xrescode_index>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const xrescode_index& from);
  void MergeFrom(const xrescode_index& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(xrescode_index* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "xrescode.xrescode_index";
  }
  protected:
  explicit xrescode_index(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_xrescode_5fextensions_5fv3_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kFieldsFieldNumber = 2,
    kNameFieldNumber = 1,
    kFileMappingFieldNumber = 4,
    kIndexTypeFieldNumber = 3,
    kAllowNotFoundFieldNumber = 5,
  };
  // repeated string fields = 2;
  int fields_size() const;
  private:
  int _internal_fields_size() const;
  public:
  void clear_fields();
  const std::string& fields(int index) const;
  std::string* mutable_fields(int index);
  void set_fields(int index, const std::string& value);
  void set_fields(int index, std::string&& value);
  void set_fields(int index, const char* value);
  void set_fields(int index, const char* value, size_t size);
  std::string* add_fields();
  void add_fields(const std::string& value);
  void add_fields(std::string&& value);
  void add_fields(const char* value);
  void add_fields(const char* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& fields() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_fields();
  private:
  const std::string& _internal_fields(int index) const;
  std::string* _internal_add_fields();
  public:

  // string name = 1;
  void clear_name();
  const std::string& name() const;
  void set_name(const std::string& value);
  void set_name(std::string&& value);
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  std::string* mutable_name();
  std::string* release_name();
  void set_allocated_name(std::string* name);
  private:
  const std::string& _internal_name() const;
  void _internal_set_name(const std::string& value);
  std::string* _internal_mutable_name();
  public:

  // string file_mapping = 4;
  void clear_file_mapping();
  const std::string& file_mapping() const;
  void set_file_mapping(const std::string& value);
  void set_file_mapping(std::string&& value);
  void set_file_mapping(const char* value);
  void set_file_mapping(const char* value, size_t size);
  std::string* mutable_file_mapping();
  std::string* release_file_mapping();
  void set_allocated_file_mapping(std::string* file_mapping);
  private:
  const std::string& _internal_file_mapping() const;
  void _internal_set_file_mapping(const std::string& value);
  std::string* _internal_mutable_file_mapping();
  public:

  // .xrescode.xrescode_index_type index_type = 3;
  void clear_index_type();
  ::xrescode::xrescode_index_type index_type() const;
  void set_index_type(::xrescode::xrescode_index_type value);
  private:
  ::xrescode::xrescode_index_type _internal_index_type() const;
  void _internal_set_index_type(::xrescode::xrescode_index_type value);
  public:

  // bool allow_not_found = 5;
  void clear_allow_not_found();
  bool allow_not_found() const;
  void set_allow_not_found(bool value);
  private:
  bool _internal_allow_not_found() const;
  void _internal_set_allow_not_found(bool value);
  public:

  // @@protoc_insertion_point(class_scope:xrescode.xrescode_index)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> fields_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr file_mapping_;
  int index_type_;
  bool allow_not_found_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_xrescode_5fextensions_5fv3_2eproto;
};
// -------------------------------------------------------------------

class xrescode_loader PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:xrescode.xrescode_loader) */ {
 public:
  inline xrescode_loader() : xrescode_loader(nullptr) {}
  virtual ~xrescode_loader();
  explicit constexpr xrescode_loader(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  xrescode_loader(const xrescode_loader& from);
  xrescode_loader(xrescode_loader&& from) noexcept
    : xrescode_loader() {
    *this = ::std::move(from);
  }

  inline xrescode_loader& operator=(const xrescode_loader& from) {
    CopyFrom(from);
    return *this;
  }
  inline xrescode_loader& operator=(xrescode_loader&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const xrescode_loader& default_instance() {
    return *internal_default_instance();
  }
  static inline const xrescode_loader* internal_default_instance() {
    return reinterpret_cast<const xrescode_loader*>(
               &_xrescode_loader_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(xrescode_loader& a, xrescode_loader& b) {
    a.Swap(&b);
  }
  inline void Swap(xrescode_loader* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(xrescode_loader* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline xrescode_loader* New() const final {
    return CreateMaybeMessage<xrescode_loader>(nullptr);
  }

  xrescode_loader* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<xrescode_loader>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const xrescode_loader& from);
  void MergeFrom(const xrescode_loader& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(xrescode_loader* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "xrescode.xrescode_loader";
  }
  protected:
  explicit xrescode_loader(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_xrescode_5fextensions_5fv3_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kIndexesFieldNumber = 201,
    kTagsFieldNumber = 301,
    kFileListFieldNumber = 101,
    kFilePathFieldNumber = 102,
    kCodeFieldFieldNumber = 103,
    kClassNameFieldNumber = 401,
  };
  // repeated .xrescode.xrescode_index indexes = 201;
  int indexes_size() const;
  private:
  int _internal_indexes_size() const;
  public:
  void clear_indexes();
  ::xrescode::xrescode_index* mutable_indexes(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::xrescode::xrescode_index >*
      mutable_indexes();
  private:
  const ::xrescode::xrescode_index& _internal_indexes(int index) const;
  ::xrescode::xrescode_index* _internal_add_indexes();
  public:
  const ::xrescode::xrescode_index& indexes(int index) const;
  ::xrescode::xrescode_index* add_indexes();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::xrescode::xrescode_index >&
      indexes() const;

  // repeated string tags = 301;
  int tags_size() const;
  private:
  int _internal_tags_size() const;
  public:
  void clear_tags();
  const std::string& tags(int index) const;
  std::string* mutable_tags(int index);
  void set_tags(int index, const std::string& value);
  void set_tags(int index, std::string&& value);
  void set_tags(int index, const char* value);
  void set_tags(int index, const char* value, size_t size);
  std::string* add_tags();
  void add_tags(const std::string& value);
  void add_tags(std::string&& value);
  void add_tags(const char* value);
  void add_tags(const char* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& tags() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_tags();
  private:
  const std::string& _internal_tags(int index) const;
  std::string* _internal_add_tags();
  public:

  // string file_list = 101;
  void clear_file_list();
  const std::string& file_list() const;
  void set_file_list(const std::string& value);
  void set_file_list(std::string&& value);
  void set_file_list(const char* value);
  void set_file_list(const char* value, size_t size);
  std::string* mutable_file_list();
  std::string* release_file_list();
  void set_allocated_file_list(std::string* file_list);
  private:
  const std::string& _internal_file_list() const;
  void _internal_set_file_list(const std::string& value);
  std::string* _internal_mutable_file_list();
  public:

  // string file_path = 102;
  void clear_file_path();
  const std::string& file_path() const;
  void set_file_path(const std::string& value);
  void set_file_path(std::string&& value);
  void set_file_path(const char* value);
  void set_file_path(const char* value, size_t size);
  std::string* mutable_file_path();
  std::string* release_file_path();
  void set_allocated_file_path(std::string* file_path);
  private:
  const std::string& _internal_file_path() const;
  void _internal_set_file_path(const std::string& value);
  std::string* _internal_mutable_file_path();
  public:

  // string code_field = 103;
  void clear_code_field();
  const std::string& code_field() const;
  void set_code_field(const std::string& value);
  void set_code_field(std::string&& value);
  void set_code_field(const char* value);
  void set_code_field(const char* value, size_t size);
  std::string* mutable_code_field();
  std::string* release_code_field();
  void set_allocated_code_field(std::string* code_field);
  private:
  const std::string& _internal_code_field() const;
  void _internal_set_code_field(const std::string& value);
  std::string* _internal_mutable_code_field();
  public:

  // string class_name = 401;
  void clear_class_name();
  const std::string& class_name() const;
  void set_class_name(const std::string& value);
  void set_class_name(std::string&& value);
  void set_class_name(const char* value);
  void set_class_name(const char* value, size_t size);
  std::string* mutable_class_name();
  std::string* release_class_name();
  void set_allocated_class_name(std::string* class_name);
  private:
  const std::string& _internal_class_name() const;
  void _internal_set_class_name(const std::string& value);
  std::string* _internal_mutable_class_name();
  public:

  // @@protoc_insertion_point(class_scope:xrescode.xrescode_loader)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::xrescode::xrescode_index > indexes_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> tags_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr file_list_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr file_path_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr code_field_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr class_name_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_xrescode_5fextensions_5fv3_2eproto;
};
// ===================================================================

static const int kLoaderFieldNumber = 1351;
extern ::PROTOBUF_NAMESPACE_ID::internal::ExtensionIdentifier< ::google::protobuf::MessageOptions,
    ::PROTOBUF_NAMESPACE_ID::internal::RepeatedMessageTypeTraits< ::xrescode::xrescode_loader >, 11, false >
  loader;

// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// xrescode_index

// string name = 1;
inline void xrescode_index::clear_name() {
  name_.ClearToEmpty();
}
inline const std::string& xrescode_index::name() const {
  // @@protoc_insertion_point(field_get:xrescode.xrescode_index.name)
  return _internal_name();
}
inline void xrescode_index::set_name(const std::string& value) {
  _internal_set_name(value);
  // @@protoc_insertion_point(field_set:xrescode.xrescode_index.name)
}
inline std::string* xrescode_index::mutable_name() {
  // @@protoc_insertion_point(field_mutable:xrescode.xrescode_index.name)
  return _internal_mutable_name();
}
inline const std::string& xrescode_index::_internal_name() const {
  return name_.Get();
}
inline void xrescode_index::_internal_set_name(const std::string& value) {
  
  name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void xrescode_index::set_name(std::string&& value) {
  
  name_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:xrescode.xrescode_index.name)
}
inline void xrescode_index::set_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:xrescode.xrescode_index.name)
}
inline void xrescode_index::set_name(const char* value,
    size_t size) {
  
  name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:xrescode.xrescode_index.name)
}
inline std::string* xrescode_index::_internal_mutable_name() {
  
  return name_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* xrescode_index::release_name() {
  // @@protoc_insertion_point(field_release:xrescode.xrescode_index.name)
  return name_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void xrescode_index::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    
  } else {
    
  }
  name_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), name,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:xrescode.xrescode_index.name)
}

// repeated string fields = 2;
inline int xrescode_index::_internal_fields_size() const {
  return fields_.size();
}
inline int xrescode_index::fields_size() const {
  return _internal_fields_size();
}
inline void xrescode_index::clear_fields() {
  fields_.Clear();
}
inline std::string* xrescode_index::add_fields() {
  // @@protoc_insertion_point(field_add_mutable:xrescode.xrescode_index.fields)
  return _internal_add_fields();
}
inline const std::string& xrescode_index::_internal_fields(int index) const {
  return fields_.Get(index);
}
inline const std::string& xrescode_index::fields(int index) const {
  // @@protoc_insertion_point(field_get:xrescode.xrescode_index.fields)
  return _internal_fields(index);
}
inline std::string* xrescode_index::mutable_fields(int index) {
  // @@protoc_insertion_point(field_mutable:xrescode.xrescode_index.fields)
  return fields_.Mutable(index);
}
inline void xrescode_index::set_fields(int index, const std::string& value) {
  // @@protoc_insertion_point(field_set:xrescode.xrescode_index.fields)
  fields_.Mutable(index)->assign(value);
}
inline void xrescode_index::set_fields(int index, std::string&& value) {
  // @@protoc_insertion_point(field_set:xrescode.xrescode_index.fields)
  fields_.Mutable(index)->assign(std::move(value));
}
inline void xrescode_index::set_fields(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  fields_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:xrescode.xrescode_index.fields)
}
inline void xrescode_index::set_fields(int index, const char* value, size_t size) {
  fields_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:xrescode.xrescode_index.fields)
}
inline std::string* xrescode_index::_internal_add_fields() {
  return fields_.Add();
}
inline void xrescode_index::add_fields(const std::string& value) {
  fields_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:xrescode.xrescode_index.fields)
}
inline void xrescode_index::add_fields(std::string&& value) {
  fields_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:xrescode.xrescode_index.fields)
}
inline void xrescode_index::add_fields(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  fields_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:xrescode.xrescode_index.fields)
}
inline void xrescode_index::add_fields(const char* value, size_t size) {
  fields_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:xrescode.xrescode_index.fields)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
xrescode_index::fields() const {
  // @@protoc_insertion_point(field_list:xrescode.xrescode_index.fields)
  return fields_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
xrescode_index::mutable_fields() {
  // @@protoc_insertion_point(field_mutable_list:xrescode.xrescode_index.fields)
  return &fields_;
}

// .xrescode.xrescode_index_type index_type = 3;
inline void xrescode_index::clear_index_type() {
  index_type_ = 0;
}
inline ::xrescode::xrescode_index_type xrescode_index::_internal_index_type() const {
  return static_cast< ::xrescode::xrescode_index_type >(index_type_);
}
inline ::xrescode::xrescode_index_type xrescode_index::index_type() const {
  // @@protoc_insertion_point(field_get:xrescode.xrescode_index.index_type)
  return _internal_index_type();
}
inline void xrescode_index::_internal_set_index_type(::xrescode::xrescode_index_type value) {
  
  index_type_ = value;
}
inline void xrescode_index::set_index_type(::xrescode::xrescode_index_type value) {
  _internal_set_index_type(value);
  // @@protoc_insertion_point(field_set:xrescode.xrescode_index.index_type)
}

// string file_mapping = 4;
inline void xrescode_index::clear_file_mapping() {
  file_mapping_.ClearToEmpty();
}
inline const std::string& xrescode_index::file_mapping() const {
  // @@protoc_insertion_point(field_get:xrescode.xrescode_index.file_mapping)
  return _internal_file_mapping();
}
inline void xrescode_index::set_file_mapping(const std::string& value) {
  _internal_set_file_mapping(value);
  // @@protoc_insertion_point(field_set:xrescode.xrescode_index.file_mapping)
}
inline std::string* xrescode_index::mutable_file_mapping() {
  // @@protoc_insertion_point(field_mutable:xrescode.xrescode_index.file_mapping)
  return _internal_mutable_file_mapping();
}
inline const std::string& xrescode_index::_internal_file_mapping() const {
  return file_mapping_.Get();
}
inline void xrescode_index::_internal_set_file_mapping(const std::string& value) {
  
  file_mapping_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void xrescode_index::set_file_mapping(std::string&& value) {
  
  file_mapping_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:xrescode.xrescode_index.file_mapping)
}
inline void xrescode_index::set_file_mapping(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  file_mapping_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:xrescode.xrescode_index.file_mapping)
}
inline void xrescode_index::set_file_mapping(const char* value,
    size_t size) {
  
  file_mapping_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:xrescode.xrescode_index.file_mapping)
}
inline std::string* xrescode_index::_internal_mutable_file_mapping() {
  
  return file_mapping_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* xrescode_index::release_file_mapping() {
  // @@protoc_insertion_point(field_release:xrescode.xrescode_index.file_mapping)
  return file_mapping_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void xrescode_index::set_allocated_file_mapping(std::string* file_mapping) {
  if (file_mapping != nullptr) {
    
  } else {
    
  }
  file_mapping_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), file_mapping,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:xrescode.xrescode_index.file_mapping)
}

// bool allow_not_found = 5;
inline void xrescode_index::clear_allow_not_found() {
  allow_not_found_ = false;
}
inline bool xrescode_index::_internal_allow_not_found() const {
  return allow_not_found_;
}
inline bool xrescode_index::allow_not_found() const {
  // @@protoc_insertion_point(field_get:xrescode.xrescode_index.allow_not_found)
  return _internal_allow_not_found();
}
inline void xrescode_index::_internal_set_allow_not_found(bool value) {
  
  allow_not_found_ = value;
}
inline void xrescode_index::set_allow_not_found(bool value) {
  _internal_set_allow_not_found(value);
  // @@protoc_insertion_point(field_set:xrescode.xrescode_index.allow_not_found)
}

// -------------------------------------------------------------------

// xrescode_loader

// string file_list = 101;
inline void xrescode_loader::clear_file_list() {
  file_list_.ClearToEmpty();
}
inline const std::string& xrescode_loader::file_list() const {
  // @@protoc_insertion_point(field_get:xrescode.xrescode_loader.file_list)
  return _internal_file_list();
}
inline void xrescode_loader::set_file_list(const std::string& value) {
  _internal_set_file_list(value);
  // @@protoc_insertion_point(field_set:xrescode.xrescode_loader.file_list)
}
inline std::string* xrescode_loader::mutable_file_list() {
  // @@protoc_insertion_point(field_mutable:xrescode.xrescode_loader.file_list)
  return _internal_mutable_file_list();
}
inline const std::string& xrescode_loader::_internal_file_list() const {
  return file_list_.Get();
}
inline void xrescode_loader::_internal_set_file_list(const std::string& value) {
  
  file_list_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void xrescode_loader::set_file_list(std::string&& value) {
  
  file_list_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:xrescode.xrescode_loader.file_list)
}
inline void xrescode_loader::set_file_list(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  file_list_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:xrescode.xrescode_loader.file_list)
}
inline void xrescode_loader::set_file_list(const char* value,
    size_t size) {
  
  file_list_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:xrescode.xrescode_loader.file_list)
}
inline std::string* xrescode_loader::_internal_mutable_file_list() {
  
  return file_list_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* xrescode_loader::release_file_list() {
  // @@protoc_insertion_point(field_release:xrescode.xrescode_loader.file_list)
  return file_list_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void xrescode_loader::set_allocated_file_list(std::string* file_list) {
  if (file_list != nullptr) {
    
  } else {
    
  }
  file_list_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), file_list,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:xrescode.xrescode_loader.file_list)
}

// string file_path = 102;
inline void xrescode_loader::clear_file_path() {
  file_path_.ClearToEmpty();
}
inline const std::string& xrescode_loader::file_path() const {
  // @@protoc_insertion_point(field_get:xrescode.xrescode_loader.file_path)
  return _internal_file_path();
}
inline void xrescode_loader::set_file_path(const std::string& value) {
  _internal_set_file_path(value);
  // @@protoc_insertion_point(field_set:xrescode.xrescode_loader.file_path)
}
inline std::string* xrescode_loader::mutable_file_path() {
  // @@protoc_insertion_point(field_mutable:xrescode.xrescode_loader.file_path)
  return _internal_mutable_file_path();
}
inline const std::string& xrescode_loader::_internal_file_path() const {
  return file_path_.Get();
}
inline void xrescode_loader::_internal_set_file_path(const std::string& value) {
  
  file_path_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void xrescode_loader::set_file_path(std::string&& value) {
  
  file_path_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:xrescode.xrescode_loader.file_path)
}
inline void xrescode_loader::set_file_path(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  file_path_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:xrescode.xrescode_loader.file_path)
}
inline void xrescode_loader::set_file_path(const char* value,
    size_t size) {
  
  file_path_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:xrescode.xrescode_loader.file_path)
}
inline std::string* xrescode_loader::_internal_mutable_file_path() {
  
  return file_path_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* xrescode_loader::release_file_path() {
  // @@protoc_insertion_point(field_release:xrescode.xrescode_loader.file_path)
  return file_path_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void xrescode_loader::set_allocated_file_path(std::string* file_path) {
  if (file_path != nullptr) {
    
  } else {
    
  }
  file_path_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), file_path,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:xrescode.xrescode_loader.file_path)
}

// string code_field = 103;
inline void xrescode_loader::clear_code_field() {
  code_field_.ClearToEmpty();
}
inline const std::string& xrescode_loader::code_field() const {
  // @@protoc_insertion_point(field_get:xrescode.xrescode_loader.code_field)
  return _internal_code_field();
}
inline void xrescode_loader::set_code_field(const std::string& value) {
  _internal_set_code_field(value);
  // @@protoc_insertion_point(field_set:xrescode.xrescode_loader.code_field)
}
inline std::string* xrescode_loader::mutable_code_field() {
  // @@protoc_insertion_point(field_mutable:xrescode.xrescode_loader.code_field)
  return _internal_mutable_code_field();
}
inline const std::string& xrescode_loader::_internal_code_field() const {
  return code_field_.Get();
}
inline void xrescode_loader::_internal_set_code_field(const std::string& value) {
  
  code_field_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void xrescode_loader::set_code_field(std::string&& value) {
  
  code_field_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:xrescode.xrescode_loader.code_field)
}
inline void xrescode_loader::set_code_field(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  code_field_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:xrescode.xrescode_loader.code_field)
}
inline void xrescode_loader::set_code_field(const char* value,
    size_t size) {
  
  code_field_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:xrescode.xrescode_loader.code_field)
}
inline std::string* xrescode_loader::_internal_mutable_code_field() {
  
  return code_field_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* xrescode_loader::release_code_field() {
  // @@protoc_insertion_point(field_release:xrescode.xrescode_loader.code_field)
  return code_field_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void xrescode_loader::set_allocated_code_field(std::string* code_field) {
  if (code_field != nullptr) {
    
  } else {
    
  }
  code_field_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), code_field,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:xrescode.xrescode_loader.code_field)
}

// repeated .xrescode.xrescode_index indexes = 201;
inline int xrescode_loader::_internal_indexes_size() const {
  return indexes_.size();
}
inline int xrescode_loader::indexes_size() const {
  return _internal_indexes_size();
}
inline void xrescode_loader::clear_indexes() {
  indexes_.Clear();
}
inline ::xrescode::xrescode_index* xrescode_loader::mutable_indexes(int index) {
  // @@protoc_insertion_point(field_mutable:xrescode.xrescode_loader.indexes)
  return indexes_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::xrescode::xrescode_index >*
xrescode_loader::mutable_indexes() {
  // @@protoc_insertion_point(field_mutable_list:xrescode.xrescode_loader.indexes)
  return &indexes_;
}
inline const ::xrescode::xrescode_index& xrescode_loader::_internal_indexes(int index) const {
  return indexes_.Get(index);
}
inline const ::xrescode::xrescode_index& xrescode_loader::indexes(int index) const {
  // @@protoc_insertion_point(field_get:xrescode.xrescode_loader.indexes)
  return _internal_indexes(index);
}
inline ::xrescode::xrescode_index* xrescode_loader::_internal_add_indexes() {
  return indexes_.Add();
}
inline ::xrescode::xrescode_index* xrescode_loader::add_indexes() {
  // @@protoc_insertion_point(field_add:xrescode.xrescode_loader.indexes)
  return _internal_add_indexes();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::xrescode::xrescode_index >&
xrescode_loader::indexes() const {
  // @@protoc_insertion_point(field_list:xrescode.xrescode_loader.indexes)
  return indexes_;
}

// repeated string tags = 301;
inline int xrescode_loader::_internal_tags_size() const {
  return tags_.size();
}
inline int xrescode_loader::tags_size() const {
  return _internal_tags_size();
}
inline void xrescode_loader::clear_tags() {
  tags_.Clear();
}
inline std::string* xrescode_loader::add_tags() {
  // @@protoc_insertion_point(field_add_mutable:xrescode.xrescode_loader.tags)
  return _internal_add_tags();
}
inline const std::string& xrescode_loader::_internal_tags(int index) const {
  return tags_.Get(index);
}
inline const std::string& xrescode_loader::tags(int index) const {
  // @@protoc_insertion_point(field_get:xrescode.xrescode_loader.tags)
  return _internal_tags(index);
}
inline std::string* xrescode_loader::mutable_tags(int index) {
  // @@protoc_insertion_point(field_mutable:xrescode.xrescode_loader.tags)
  return tags_.Mutable(index);
}
inline void xrescode_loader::set_tags(int index, const std::string& value) {
  // @@protoc_insertion_point(field_set:xrescode.xrescode_loader.tags)
  tags_.Mutable(index)->assign(value);
}
inline void xrescode_loader::set_tags(int index, std::string&& value) {
  // @@protoc_insertion_point(field_set:xrescode.xrescode_loader.tags)
  tags_.Mutable(index)->assign(std::move(value));
}
inline void xrescode_loader::set_tags(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  tags_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:xrescode.xrescode_loader.tags)
}
inline void xrescode_loader::set_tags(int index, const char* value, size_t size) {
  tags_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:xrescode.xrescode_loader.tags)
}
inline std::string* xrescode_loader::_internal_add_tags() {
  return tags_.Add();
}
inline void xrescode_loader::add_tags(const std::string& value) {
  tags_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:xrescode.xrescode_loader.tags)
}
inline void xrescode_loader::add_tags(std::string&& value) {
  tags_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:xrescode.xrescode_loader.tags)
}
inline void xrescode_loader::add_tags(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  tags_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:xrescode.xrescode_loader.tags)
}
inline void xrescode_loader::add_tags(const char* value, size_t size) {
  tags_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:xrescode.xrescode_loader.tags)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
xrescode_loader::tags() const {
  // @@protoc_insertion_point(field_list:xrescode.xrescode_loader.tags)
  return tags_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
xrescode_loader::mutable_tags() {
  // @@protoc_insertion_point(field_mutable_list:xrescode.xrescode_loader.tags)
  return &tags_;
}

// string class_name = 401;
inline void xrescode_loader::clear_class_name() {
  class_name_.ClearToEmpty();
}
inline const std::string& xrescode_loader::class_name() const {
  // @@protoc_insertion_point(field_get:xrescode.xrescode_loader.class_name)
  return _internal_class_name();
}
inline void xrescode_loader::set_class_name(const std::string& value) {
  _internal_set_class_name(value);
  // @@protoc_insertion_point(field_set:xrescode.xrescode_loader.class_name)
}
inline std::string* xrescode_loader::mutable_class_name() {
  // @@protoc_insertion_point(field_mutable:xrescode.xrescode_loader.class_name)
  return _internal_mutable_class_name();
}
inline const std::string& xrescode_loader::_internal_class_name() const {
  return class_name_.Get();
}
inline void xrescode_loader::_internal_set_class_name(const std::string& value) {
  
  class_name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void xrescode_loader::set_class_name(std::string&& value) {
  
  class_name_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:xrescode.xrescode_loader.class_name)
}
inline void xrescode_loader::set_class_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  class_name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:xrescode.xrescode_loader.class_name)
}
inline void xrescode_loader::set_class_name(const char* value,
    size_t size) {
  
  class_name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:xrescode.xrescode_loader.class_name)
}
inline std::string* xrescode_loader::_internal_mutable_class_name() {
  
  return class_name_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* xrescode_loader::release_class_name() {
  // @@protoc_insertion_point(field_release:xrescode.xrescode_loader.class_name)
  return class_name_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void xrescode_loader::set_allocated_class_name(std::string* class_name) {
  if (class_name != nullptr) {
    
  } else {
    
  }
  class_name_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), class_name,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:xrescode.xrescode_loader.class_name)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace xrescode

PROTOBUF_NAMESPACE_OPEN

template <> struct is_proto_enum< ::xrescode::xrescode_index_type> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::xrescode::xrescode_index_type>() {
  return ::xrescode::xrescode_index_type_descriptor();
}

PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_xrescode_5fextensions_5fv3_2eproto
